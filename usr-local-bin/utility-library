#!/bin/bash
#
#   utility - define some common shell functions
#
#   Copyright (c) 2014 James An <james@jamesan.ca>
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

shopt -s extglob
[ -v CMD ] || declare -r CMD=${0##*/}

# ensure we have a sane umask set
umask 0022

# check if messages are to be printed using color
unset ALL_OFF BOLD BLUE GREEN RED YELLOW
# prefer terminal safe colored and bold text when tput is supported
if tput setaf 0 &>/dev/null; then
    ALL_OFF="$(tput sgr0)"
    BOLD="$(tput bold)"
    BLUE="${BOLD}$(tput setaf 4)"
    GREEN="${BOLD}$(tput setaf 2)"
    RED="${BOLD}$(tput setaf 1)"
    YELLOW="${BOLD}$(tput setaf 3)"
else
    ALL_OFF="\e[1;0m"
    BOLD="\e[1;1m"
    BLUE="${BOLD}\e[1;34m"
    GREEN="${BOLD}\e[1;32m"
    RED="${BOLD}\e[1;31m"
    YELLOW="${BOLD}\e[1;33m"
fi
readonly ALL_OFF BOLD BLUE GREEN RED YELLOW

_plain() {
  (( QUIET )) && return
  local mesg=$1; shift
  printf "${BOLD}    ${mesg}${ALL_OFF}\n" "$@" >&1
}

_msg() {
  (( QUIET )) && return
  local mesg=$1; shift
  printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&1
}

_msg2() {
    (( QUIET )) && return
    local mesg=$1; shift
    printf "${BLUE}  ->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&1
}

_ask() {
    local mesg=$1; shift
    printf "${BLUE}::${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}" "$@" >&1
}

_warning() {
    local mesg=$1; shift
    printf "${YELLOW}==> $(gettext "WARNING:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

_error() {
    local mesg=$1; shift
    printf "${RED}==> $(gettext "ERROR:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

_exit_with_error() {
    local -i code=$1; shift
    local mesg=$1; shift
    _error $mesg
    exit $code

}

# print usage instructions
# $1 - program version
# $2 - syntax/usage string
# $3 - (opt) example invocation
# $4 - (opt) associative array of $option -> $short_description
_usage() {
    # parameter extraction
    local -r -i _num_args_min=2
    local -r -i _num_args_max=5
    local -r -a _args=(myver desc syntax options example)
    if   [ $# -gt $_num_args_max ]; then
        warning "$FUNCNAME() received too many parameters. Ignoring extra parameters..."
    elif [ $# -lt $_num_args_min ]; then
        error "$FUNCNAME() did not receive enough parameters. Aborting..."
        return 1;
    fi
    c=-1
    while [ $# -ne 0 ]; do
        if [ ${#1} -gt 3 -a `declare -p ${1:0:-3} 2> /dev/null | grep -q '^declare -a' ; echo $?` -eq 0 ]; then
            eval "declare -a ${_args[$((c+=1))]}=(\"\${!1}\")"
        else
            eval "${_args[$((c+=1))]}=\"${!1}\""
        fi
        shift
    done

    printf -- "%s %s\n\n" "$CMD" "$myver"
    printf -- "Usage: %s %s\n\n" "$CMD" "$syntax"
    printf -- "%s\n\n" "$desc"
    if [ ${#options[*]} -ne 0 ]; then
        printf -- "Options:\n"
        c='opt-key'
        for value in "${options[@]}"; do
            case "$c" in
                opt-key)
                    printf "  %-20s " "$value"
                    c='opt-desc'
                    ;;
                opt-desc)
                    printf "  %s\n" "$value"
                    c='opt-key'
                    ;;
            esac
        done
        printf "\n"
    fi
    if [ -n "$example" ]; then
        printf -- "Example: %s\n\n" "$example"
    fi
}

# print script version and copyright notice
# $1 - version string
_version() {
    printf "%s %s\n\n" "$CMD" "$1"
    printf "\
Copyright (c) 2014 James An <james@jamesan.ca>\n\n\
This is free software; see the source for copying conditions.\n\
There is NO WARRANTY, to the extent permitted by law.\n"
}

main() {
    local myver='1.0.0'
    local syntax=
    local example=
    local opt=(
        '-h, --help'    'Show this help message'
    )
    local desc="This utility shell library should be included by other shell scripts.
Direct invocation only shows this message."
    _usage myver desc syntax opt[@] example
}

if [ "$CMD" = ${BASH_SOURCE##*/} ]; then
    main "$@"
else
    unset main
fi
