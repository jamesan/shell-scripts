#
# ~/.bashrc.all
#

## Multi-session history settings ## {{{
        HISTSIZE=9000
        HISTFILESIZE=$HISTSIZE
export  HISTCONTROL=ignoreboth
export  HISTIGNORE='history*'

_bash_history_sync() {
  builtin history -a         #1
  HISTFILESIZE=$HISTSIZE     #2
  builtin history -c         #3
  builtin history -r         #4
}

history() {
  _bash_history_sync
  builtin history "$@"
}

export  PROMPT_COMMAND=_bash_history_sync;history -a;echo -en "\e]2;";history 1|sed "s/^[ \t]*[0-9]\{1,\}  //g";echo -en "\e\\"
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'

# }}}

if [[ $(ps -p $PPID -o comm=) = "tmux" ]]; then
    logfile="$(date -Isecond).$TERM.log"
    logdir=$HOME/.logs
    mkdir $logdir 2> /dev/null
    script $logdir/$logfile
    exit
fi

# Trap errors
EC() { echo -e '\e[1;33m'code $?'\e[m\n'; }
trap EC ERR

shopt -s autocd
shopt -s checkwinsize
shopt -s cmdhist
shopt -s dotglob
shopt -s extglob

export LESS="-RCQaix4"
export EDITOR=/usr/bin/nano
export VISUAL=/usr/bin/mousepad

# User specific aliases and functions

## Safety features ## {{{
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -I'                    # 'rm -i' prompts for every file
# safer alternative w/ timeout, not stored in history
alias rm='timeout 3 rm -Ivd --one-file-system'
alias ln='ln -i'
alias chown='chown --preserve-root'
alias chmod='chmod --preserve-root'
alias chgrp='chgrp --preserve-root'
alias cls=' echo -ne "\033c"'       # clear screen for real (it does not work in Terminology)
# }}}

alias cd="cd -P"
alias df='df -h'
alias du='du -c -h'
alias mkdir='mkdir -p -v'

alias diff='colordiff'              # requires colordiff package
alias hist='history'
alias more='less'
alias grep='grep --color=auto'

alias nano='nano -w'
alias ping='ping -c 5'

alias da='date "+%a, %b %d, %Y [%T]"'
alias du1='du --max-depth=1'
alias ports='ss --all --numeric --processes --ipv4 --ipv6'
alias psc='ps xawf -eo pid,user,cgroup,args'
alias pgrep='psc|grep'           # requires an argument

## Make Bash error tolerant ## {{{
alias :q=' exit'
alias :Q=' exit'
alias :x=' exit'
alias cd..='cd ..'
alias   ..='cd ..'
# }}}

#alias xclipi='xclip -selection clipboard -i'
#alias xclipo='xclip -selection clipboard -o'

#alias edit="if test -n $VISUAL ; then $VISUAL ; elif test -n $EDITOR ; then $EDITOR ; fi
#[[ -n $VISUAL ]] && echo "$VISUAL" || [[ -n $EDITOR ]] && echo "$EDITOR" || echo 'NONE'

# Auto-sudo privileged commands
if [ $UID -ne 0 ]; then
    alias sudo='sudo '
    alias suedit='sudo -e'
    for cmd in \
            chroot fdisk gdisk cgdisk sgdisk dd mount umount losetup foremost rmmod modprobe usermod auditctl systemctl pacman pkill kill updatedb chown dkms wifi-menu netctl netctl-auto hdparm sdparm powerpill pacman-optimize ; do
        alias $cmd="sudo $cmd"
    done
#    for cmd in \
#            pac ; do
#        alias $cmd="sudo -E $cmd"
#    done
fi

# Auto-execute commands in subshell
#for cmd in \
#        suedit ; do
#    alias $cmd="$cmd $@ &"
#done

alias hibernate='sys hibernate'
alias hybrid-sleep='sys hybrid-sleep'
alias reboot='sys reboot'
alias poweroff='sys poweroff'
alias suspend='sys suspend'

alias sys='systemctl'
alias syss='sys start'
alias syst='sys stop'
alias syse='sys enable'
alias sysd='sys disable'
alias sysr='sys reload-or-try-restart'
alias sysR='sys try-restart'
alias sysS='sys status'
alias sysF='sys --failed'
alias sysA='sys --all'

alias sysu='\systemctl --user'
alias sysus='sysu start'
alias sysut='sysu stop'
alias sysue='sysu enable'
alias sysud='sysu disable'
alias sysur='sysu reload-or-try-restart'
alias sysuR='sysu try-restart'
alias sysuS='sysu status'
alias sysuF='sysu --failed'
alias sysuA='sysu --all'

## pacman ## {{{
alias pac='pacman'
alias pack='package-query'
alias pacsyu='pac -Syu'             # Synchronize local and ABS with repositories and then upgrade local packages that are out of date
alias pacsy='pac -Sy'               # Update and refresh the local package and ABS databases against repositories
alias pacsyy='pac -Syy'             # Force refresh of all package lists and ABS databases after updating /etc/pac.d/mirrorlist
alias pacs='pac -S'                 # Install specific package(s) from the repositories
alias pacsw='pac -Sw'               # Download specific package(s) from the repositories (but don't install)
alias pacu='pac -U'                 # Install specific package not from the repositories but from a file
alias pacsd='pac -S --asdeps'       # Install given package(s) as dependencies of another package
alias pacr='pac -R'                 # Remove the specified package(s), retaining its configuration(s) and required dependencies
alias pacrns='pac -Rns'             # Remove the specified package(s), its configuration(s) and unneeded dependencies
alias pacsi='pac -Si'               # Display information about a given package in the repositories
alias pacas='pack -As --sort w'     # Search for package(s) in the repositories
alias pacss='pack -Ss --sort n'     # Search for package(s) in the repositories
alias pacsl='pac -Sl'               # Search for package(s) in the repositories
alias pacqi='pac -Qi'               # Display information about a given package in the local database
alias pacqs='pack -Qs --sort n'     # Search for package(s) in the local database
alias pacql='pac -Ql'               # Search for package(s) in the local database
alias pacqo='pac -Qo'               # Search for package(s) that own the specified file(s)
# '[r]emove [o]rphans' - recursively remove ALL orphaned packages
alias pacro="/usr/bin/pacman -Qtdq > /dev/null && sudo /usr/bin/pacman -Rns \$(/usr/bin/pacman -Qtdq | sed -e ':a;N;$!ba;s/\n/ /g')"
# }}}

## ls ## {{{
alias ls='ls -hF --color=auto'
alias lr='ls -R'                    # recursive ls
alias ll='ls -l'
alias la='ll -A'
alias lx='ll -BX'                   # sort by extension
alias lz='ll -rS'                   # sort by size
alias lt='ll -rt'                   # sort by date
alias lm='la | more'
# }}}

# Install specific package(s) from the AUR
aurs() {
    local p

    (($#)) || return

    (
    for p; do
        (
        local e=1
        cd /var/abs/local
        curl -3 https://aur.archlinux.org/packages/${p:0:2}/$p/$p.tar.gz | tar xzvf - && \
            cd $p && makepkg --noconfirm -si
        ((e=e || $?))
        return "$e"
        )
    done
    )
}

# Install specific package(s) from the AUR as dependencies of another package
aursd() {
    local p

    (($#)) || return

    (
    for p; do
        (
        local e=1
        cd /var/abs/local
        curl -3 https://aur.archlinux.org/packages/${p:0:2}/$p/$p.tar.gz | tar xzvf - && \
            cd $p && makepkg --noconfirm --asdeps -si
        ((e=e || $?))
        return "$e"
        )
    done
    )
}

# Download and make specific package(s) from the AUR (but don't install)
aursw() {
    local p

    (($#)) || return

    (
    for p; do
        (
        local e=1
        cd /var/abs/local
        curl -3 https://aur.archlinux.org/packages/${p:0:2}/$p/$p.tar.gz | tar xzvf - && \
            cd $p && makepkg -d --verifysource
        ((e=e || $?))
        return "$e"
        )
    done
    )
}

# Execute command in a subshell
function ex() {
    exec "$@" &> /dev/null &
}

# Swap two files

function swap()
{
    if [ $# -ne 2 ]; then
        echo "Usage: swap file1 file2"
    else
        local TMPFILE=$(mktemp)
        mv "$1" $TMPFILE
        mv "$2" "$1"
        mv $TMPFILE "$2"
    fi
}

# Multi-format archie extractor
# extract [file1] [file2] [file3] ...
extract() {
    local c e i

    (($#)) || return

    for i; do
        c=''
        e=1

        if [[ ! -r $i ]]; then
            echo "$0: file is unreadable: \`$i'" >&2
            continue
        fi

        case $i in
            *.t@(gz|lz|xz|b@(2|z?(2))|a@(z|r?(.@(Z|bz?(2)|gz|lzma|xz)))))
                   c=(bsdtar xvf);;
            *.7z)  c=(7z x);;
            *.Z)   c=(uncompress);;
            *.bz2) c=(bunzip2);;
            *.exe) c=(cabextract);;
            *.gz)  c=(gunzip);;
            *.rar) c=(unrar x);;
            *.xz)  c=(unxz);;
            *.zip) c=(unzip);;
            *)     echo "$0: unrecognized file extension: \`$i'" >&2
                   continue;;
        esac

        command "${c[@]}" "$i"
        ((e = e || $?))
    done
    return "$e"
}

# List loaded kernel modules and their properties
function aa_mod_parameters() {
    N=/dev/null;
    C=`tput op` O=$(echo -en "\n`tput setaf 2`>>> `tput op`");
    for mod in $(cat /proc/modules|cut -d" " -f1);
    do
        md=/sys/module/$mod/parameters;
        [[ ! -d $md ]] && continue;
        m=$mod;
        d=`modinfo -d $m 2>$N | tr "\n" "\t"`;
        echo -en "$O$m$C";
        [[ ${#d} -gt 0 ]] && echo -n " - $d";
        echo;
        for mc in $(cd $md; echo *);
        do
            de=`modinfo -p $mod 2>$N | grep ^$mc 2>$N|sed "s/^$mc=//" 2>$N`;
            echo -en "\t$mc=`cat $md/$mc 2>$N`";
            [[ ${#de} -gt 1 ]] && echo -en " - $de";
            echo;
        done;
    done
}
function show_mod_parameter_info() {
    if tty -s <&1
    then
        green="\e[1;32m"
        yellow="\e[1;33m"
        cyan="\e[1;36m"
        reset="\e[0m"
    else
        green=
        yellow=
        cyan=
        reset=
    fi
    newline=$'\n'

    while read mod
    do
        md=/sys/module/$mod/parameters
        [[ ! -d $md ]] && continue
        d="$(modinfo -d $mod 2>/dev/null | tr "\n" "\t")"
        echo -en "$green$mod$reset"
        [[ ${#d} -gt 0 ]] && echo -n " - $d"
        echo
        pnames=()
        pdescs=()
        pvals=()
        pdesc=
        add_desc=false
        while IFS="$newline" read p
        do
            if [[ $p =~ ^[[:space:]] ]]
            then
                pdesc+="$newline    $p"
            else
                $add_desc && pdescs+=("$pdesc")
                pname="${p%%:*}"
                pnames+=("$pname")
                pdesc=("    ${p#*:}")
                pvals+=("$(cat $md/$pname 2>/dev/null)")
            fi
            add_desc=true
        done < <(modinfo -p $mod 2>/dev/null)
        $add_desc && pdescs+=("$pdesc")
        for ((i=0; i<${#pnames[@]}; i++))
        do
            printf "  $cyan%s$reset = $yellow%s$reset\n%s\n" \
                ${pnames[i]} \
                "${pvals[i]}" \
                "${pdescs[i]}"
        done
        echo

    done < <(cut -d' ' -f1 /proc/modules | sort)
}
